spring:
  # PostgreSQL Configuration
  datasource:
    businessdatasource:
      url: ${BUSINESS_DATASOURCE_URL}
      username: ${BUSINESS_DATASOURCE_USERNAME}
      password: ${BUSINESS_DATASOURCE_PASSWORD}
      driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO}
      dialect: org.hibernate.dialect.PostgreSQLDialect
      show-sql: ${JPA_SHOW_SQL}
      format-sql: true  # Pretty-print SQL in logs
    properties:
      hibernate:
        format_sql: true

  # MongoDB Configuration
  data:
    mongodb:
      uri: ${EVENT_DATASOURCE_URI}
      database: ${EVENT_DATASOURCE_DATABASE}

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID}
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET}
      key-deserializer: ${KAFKA_CONSUMER_KEY_DESERIALIZER}
      value-deserializer: ${KAFKA_CONSUMER_VALUE_DESERIALIZER}
    producer:
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER}
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER}

  # ElasticSearch Configuration (optional, remove if not used)
  data:
    elasticsearch:
      repositories:
        enabled: true
      cluster-name: ${ELASTICSEARCH_CLUSTER_NAME}
      cluster-nodes: ${ELASTICSEARCH_CLUSTER_NODES}

  # Sleuth and Zipkin Configuration
  sleuth:
    sampler:
      probability: ${SLEUTH_SAMPLER_PROBABILITY}

  zipkin:
    base-url: ${ZIPKIN_BASE_URL}
    enabled: ${ZIPKIN_ENABLED}

logging:
  level:
    org:
      springframework: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING_PROBABILITY}
